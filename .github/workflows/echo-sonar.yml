name: Drift Sonar Daily

on:
  schedule:
    - cron: "17 15 * * *"   # daily; adjust if you want (UTC)
  workflow_dispatch:
    inputs:
      force_alert:
        description: "Force-create an alert Issue (for testing)"
        required: false
        default: "false"

jobs:
  sonar:
    runs-on: ubuntu-latest
    permissions:
      contents: write      # commit README + log
      issues: write        # create Issues on ALERT

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: pip install -r requirements.txt

      - name: Run sonar
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          COMPLETIONS_MODEL: ${{ secrets.COMPLETIONS_MODEL }}   # optional
          EMBED_MODEL: text-embedding-3-small                   # pin to avoid false diffs
          SNR_ALERT_THRESHOLD: "0.03"                           # tweak if desired
        run: python echo_sonar.py

      - name: Extract outputs
        id: parse
        run: |
          python - <<'PY' | tee outputs.txt
          import json
          with open('echo_sonar_log.json','r',encoding='utf-8') as f:
            d = json.load(f)[-1]
          print("fingerprint=0x"+d['snapshot']['fingerprint'])
          print("alert=" + ("true" if d.get('alert') else "false"))
          PY
          echo "fingerprint=$(grep '^fingerprint=' outputs.txt | cut -d= -f2)" >> "$GITHUB_OUTPUT"
          echo "alert=$(grep '^alert=' outputs.txt | cut -d= -f2)" >> "$GITHUB_OUTPUT"

      # Create the 'alert' label if it doesn't exist (best-effort)
      - name: Ensure 'alert' label exists
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const wanted = { name: 'alert', color: 'd73a4a', description: 'Drift Sonar alert' };
            try {
              const labels = await github.paginate(github.rest.issues.listLabelsForRepo, {owner, repo, per_page: 100});
              if (!labels.find(l => l.name.toLowerCase() === wanted.name)) {
                await github.rest.issues.createLabel({owner, repo, name: wanted.name, color: wanted.color, description: wanted.description});
              }
            } catch (e) {
              core.warning('Could not ensure label: ' + e.message);
            }

      - name: Open issue on ALERT (or when forced)
        if: ${{ steps.parse.outputs.alert == 'true' || github.event.inputs.force_alert == 'true' }}
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const fp = '${{ steps.parse.outputs.fingerprint }}';
            const runUrl = `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`;
            await github.rest.issues.create({
              owner, repo,
              title: `Drift Sonar ALERT: ${fp}`,
              body: `Mean SNR crossed threshold (or forced).\n\nFingerprint: \`${fp}\`\nRun: ${runUrl}`,
              labels: ['alert']
            });

      - name: Update README badges
        env:
          FP: ${{ steps.parse.outputs.fingerprint }}
          ALERT: ${{ steps.parse.outputs.alert }}
        run: |
          python - <<'PY'
          import os, re
          fp=os.environ["FP"]
          alert=os.environ["ALERT"]=="true"
          readme="README.md"
          s=open(readme,encoding="utf-8").read()
          fp_badge=f"![EchoFingerprint](https://img.shields.io/badge/EchoFingerprint-{fp}-black)"
          canary_badge="![Canary](https://img.shields.io/badge/Canary-ALERT-red)" if alert else "![Canary](https://img.shields.io/badge/Canary-OK-black)"
          s=re.sub(r"^<!-- FINGERPRINT_BADGE -->.*$", fp_badge, s, flags=re.M)
          s=re.sub(r"^<!-- CANARY_BADGE -->.*$", canary_badge, s, flags=re.M)
          open(readme,"w",encoding="utf-8").write(s)
          print("Updated badges â†’", fp_badge, " | ", canary_badge)
          PY

      - name: Commit results
        run: |
          git config user.name "sonar-bot"
          git config user.email "actions@users.noreply.github.com"
          git add README.md echo_sonar_log.json
          git commit -m "daily sonar: ${{ steps.parse.outputs.fingerprint }} (alert=${{ steps.parse.outputs.alert }})" || echo "No changes"
          git push
